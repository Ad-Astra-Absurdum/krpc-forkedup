#!/usr/bin/env python

import json
import krpc
import argparse
import os
from krpc.types import Types
from krpc.decoder import Decoder

def main():
    parser = argparse.ArgumentParser(description='Generate definition file for kRPC services')
    parser.add_argument('--address', action='store', default='localhost',
                        help='Address to connect to (default: localhost)')
    parser.add_argument('--rpc-port', action='store', default=50000, type=int,
                        help='RPC port to connect to (default: 50000)')
    parser.add_argument('--out', action='store', default=None,
                        help='File path to output to (default: output to standard output)')
    parser.add_argument('--service', nargs='*', default=None,
                        help='Services to output definitions for (default: all services)')
    parser.add_argument('--search-path', nargs='*', default=[],
                        help='Additional paths to pass to krpc.types.add_search_path()')
    args = parser.parse_args()

    for path in args.search_path:
        krpc.types.add_search_path(path)

    conn = krpc.connect(name='service-definition', address=args.address, rpc_port=args.rpc_port, stream_port=None)
    types = Types()

    info = {}
    for service in conn.krpc.get_services().services:

        if args.service is not None and service.name not in args.service:
            continue

        service_info = {
            'procedures': {},
            'classes': {},
            'enumerations': {},
            'documentation': service.documentation
        }
        info[service.name] = service_info
        for procedure in service.procedures:
            procedure_info = {
                'parameters': [],
                'return_type': procedure.return_type,
                'attributes': [str(x) for x in procedure.attributes],
                'documentation': procedure.documentation
            }
            service_info['procedures'][procedure.name] = procedure_info
            for parameter in procedure.parameters:

                default_argument = None
                if parameter.HasField('default_argument'):
                    typ = types.as_type(parameter.type)
                    default_argument = Decoder.decode(parameter.default_argument, typ)

                parameter_info = {
                    'name': parameter.name,
                    'type': parameter.type,
                    'default_argument': default_argument
                }
                procedure_info['parameters'].append(parameter_info)
        for cls in service.classes:
            cls_info = {
                'documentation': cls.documentation
            }
            service_info['classes'][cls.name] = cls_info
        for enum in service.enumerations:
            enum_info = {
                'values': [
                    {'name': value.name, 'value': value.value, 'documentation': value.documentation}
                    for value in enum.values],
                'documentation': enum.documentation
            }
            service_info['enumerations'][enum.name] = enum_info

    content = json.dumps(info, sort_keys=True, indent=4, separators=(',', ': '))
    if args.out:
        if not os.path.exists(os.path.dirname(args.out)):
            os.makedirs(os.path.dirname(args.out))
        with open(args.out, 'w') as f:
            f.write(content)
    else:
        print content

if __name__ == '__main__':
    main()
