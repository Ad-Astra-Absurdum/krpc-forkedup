#encoding UTF-8

.. default-domain:: #echo $domain

.. _#echo $language #-api-parts:

Parts
=====

The following classes allow interaction with a vessels individual parts.

.. contents::
   :local:

Parts
-----

#echo $classes['SpaceCenter.Parts'](members=False)
#for $member in $classes['SpaceCenter.Parts'].members
#echo $member(3)
#if $member.name == 'SpaceCenter.Parts.Root'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-trees-of-parts`.
#else if $member.name == 'SpaceCenter.Parts.InStage'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-staging`.
#else if $member.name == 'SpaceCenter.Parts.InDecoupleStage'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-staging`.
#end if
#end for

Part
----

#echo $classes['SpaceCenter.Part'](members=False)
#for $member in $classes['SpaceCenter.Part'].members
#echo $member(3)
#if $member.name == 'SpaceCenter.Part.Parent'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-trees-of-parts`.
#else if $member.name == 'SpaceCenter.Part.Children'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-trees-of-parts`.
#else if $member.name == 'SpaceCenter.Part.AxiallyAttached'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-attachment-modes`.
#else if $member.name == 'SpaceCenter.Part.RadiallyAttached'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-attachment-modes`.
#else if $member.name == 'SpaceCenter.Part.Stage'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-staging`.
#else if $member.name == 'SpaceCenter.Part.DecoupleStage'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-staging`.
#else if $member.name == 'SpaceCenter.Part.FuelLinesFrom'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-fuel-lines`.
#else if $member.name == 'SpaceCenter.Part.FuelLinesTo'
      .. note:: See the discussion on :ref:`#echo $language #-api-parts-fuel-lines`.
#else if $member.name == 'SpaceCenter.Part.ReferenceFrame'
      .. figure:: /images/reference-frames/part.png
         :align: center

         Mk1 Command Pod reference frame origin and axes
#end if
#end for

Module
------

#echo $classes['SpaceCenter.Module']()

Specific Types of Part
----------------------

The following classes provide functionality for specific types of part.

.. contents::
   :local:

Decoupler
^^^^^^^^^

#echo $classes['SpaceCenter.Decoupler']()

Docking Port
^^^^^^^^^^^^

#echo $classes['SpaceCenter.DockingPort'](members=False)
#for $member in $classes['SpaceCenter.DockingPort'].members
#echo $member(3)
#if $member.name == 'SpaceCenter.DockingPort.ReferenceFrame'
      .. figure:: /images/reference-frames/docking-port.png
         :align: center

         Docking port reference frame origin and axes

      .. figure:: /images/reference-frames/docking-port-inline.png
         :align: center

         Inline docking port reference frame origin and axes
#end if
#end for

#echo $enumerations['SpaceCenter.DockingPortState']()

Engine
^^^^^^

#echo $classes['SpaceCenter.Engine']()

Landing Gear
^^^^^^^^^^^^

#echo $classes['SpaceCenter.LandingGear']()
#echo $enumerations['SpaceCenter.LandingGearState']()

Landing Leg
^^^^^^^^^^^

#echo $classes['SpaceCenter.LandingLeg']()
#echo $enumerations['SpaceCenter.LandingLegState']()

Launch Clamp
^^^^^^^^^^^^

#echo $classes['SpaceCenter.LaunchClamp']()

Light
^^^^^

#echo $classes['SpaceCenter.Light']()

Parachute
^^^^^^^^^

#echo $classes['SpaceCenter.Parachute']()
#echo $enumerations['SpaceCenter.ParachuteState']()

Radiator
^^^^^^^^

#echo $classes['SpaceCenter.Radiator']()
#echo $enumerations['SpaceCenter.RadiatorState']()

Reaction Wheel
^^^^^^^^^^^^^^

#echo $classes['SpaceCenter.ReactionWheel']()

Sensor
^^^^^^

#echo $classes['SpaceCenter.Sensor']()

Solar Panel
^^^^^^^^^^^

#echo $classes['SpaceCenter.SolarPanel']()
#echo $enumerations['SpaceCenter.SolarPanelState']()

.. _#echo $language #-api-parts-trees-of-parts:

Trees of Parts
--------------

Vessels in KSP are comprised of a number of parts, connected to one another in a
*tree* structure. An example vessel is shown in Figure 1, and the corresponding
tree of parts in Figure 2. The craft file for this example can also be
:download:`downloaded here </crafts/PartsTree.craft>`.

.. figure:: /images/api/parts.png
   :align: left
   :figwidth: 275

   **Figure 1** -- Example parts making up a vessel.

.. figure:: /images/api/parts-tree.png
   :align: right
   :figwidth: 275

   **Figure 2** -- Tree of parts for the vessel in Figure 1. Arrows point from
   the parent part to the child part.

.. container:: clearer

   ..

Traversing the Tree
^^^^^^^^^^^^^^^^^^^

The tree of parts can be traversed using the attributes #echo $ref('M:SpaceCenter.Parts.Root') #,
#echo $ref('M:SpaceCenter.Part.Parent') # and #echo $ref('M:SpaceCenter.Part.Children') #.

The root of the tree is the same as the vessels *root part* (part number 1 in
the example above) and can be obtained by calling #echo $ref('M:SpaceCenter.Parts.Root') #.
A parts children can be obtained by calling #echo $ref('M:SpaceCenter.Part.Children') #.
If the part does not have any children, #echo $ref('M:SpaceCenter.Part.Children') #
returns an empty list. A parts parent can be obtained by calling
#echo $ref('M:SpaceCenter.Part.Parent') #. If the part does not have a parent
(as is the case for the root part), #echo $ref('M:SpaceCenter.Part.Parent') #
returns ``#echo $value('null') #``.

The following #echo $language # example uses these attributes to perform a
depth-first traversal over all of the parts in a vessel:

#if $language == 'python'

.. code-block:: python

   root = vessel.parts.root
   stack = [(root, 0)]
   while len(stack) > 0:
       part,depth = stack.pop()
       print(' '*depth, part.title)
       for child in part.children:
           stack.append((child, depth+1))

#else if $language == 'lua'

.. code-block:: lua

   local root = vessel.parts.root
   local stack = {{root,0}}
   while #stack > 0 do
     local part,depth = unpack(table.remove(stack))
     print(string.rep(' ', depth) .. part.title)
     for _,child in ipairs(part.children) do
       table.insert(stack, {child, depth+1})
     end
   end

#end if

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

    Command Pod Mk1
     TR-18A Stack Decoupler
      FL-T400 Fuel Tank
       LV-909 Liquid Fuel Engine
        TR-18A Stack Decoupler
         FL-T800 Fuel Tank
          LV-909 Liquid Fuel Engine
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
       LT-1 Landing Struts
       LT-1 Landing Struts
     Mk16 Parachute

.. _#echo $language #-api-parts-attachment-modes:

Attachment Modes
^^^^^^^^^^^^^^^^

Parts can be attached to other parts either *radially* (on the side of the
parent part) or *axially* (on the end of the parent part, to form a stack).

For example, in the vessel pictured above, the parachute (part 2) is *axially*
connected to its parent (the command pod -- part 1), and the landing leg
(part 5) is *radially* connected to its parent (the fuel tank -- part 4).

The root part of a vessel (for example the command pod -- part 1) does not have
a parent part, so does not have an attachment mode. However, the part is
consider to be *axially* attached to nothing.

The following #echo $language # example does a depth-first traversal as before,
but also prints out the attachment mode used by the part:

#if $language == 'python'

.. code-block:: python

   root = vessel.parts.root
   stack = [(root, 0)]
   while len(stack) > 0:
       part,depth = stack.pop()
       if part.axially_attached:
           attach_mode = 'axial'
       else: # radially_attached
           attach_mode = 'radial'
       print(' '*depth, part.title, '-', attach_mode)
       for child in part.children:
           stack.append((child, depth+1))

#else if $language == 'lua'

.. code-block:: lua

   local root = vessel.parts.root
   local stack = {{root, 0}}
   while #stack > 0 do
     local part,depth = unpack(table.remove(stack))
     local attach_mode
     if part.axially_attached then
       attach_mode = 'axial'
     else -- radially_attached
       attach_mode = 'radial'
     end
     print(string.rep(' ', depth) .. part.title .. ' - ' .. attach_mode)
     for _,child in ipairs(part.children) do
       table.insert(stack, {child, depth+1})
     end
   end

#end if

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

 Command Pod Mk1 - axial
  TR-18A Stack Decoupler - axial
   FL-T400 Fuel Tank - axial
    LV-909 Liquid Fuel Engine - axial
     TR-18A Stack Decoupler - axial
      FL-T800 Fuel Tank - axial
       LV-909 Liquid Fuel Engine - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
    LT-1 Landing Struts - radial
    LT-1 Landing Struts - radial
  Mk16 Parachute - axial

.. _#echo $language #-api-parts-fuel-lines:

Fuel Lines
----------

.. figure:: /images/api/parts-fuel-lines.png
   :align: right
   :figwidth: 200

   **Figure 5** -- Fuel lines from the example in Figure 1. Fuel flows from the
   parts highlighted in green, into the part highlighted in blue.

.. figure:: /images/api/parts-fuel-lines-tree.png
   :align: right
   :figwidth: 200

   **Figure 4** -- A subset of the parts tree from Figure 2 above.

Fuel lines are considered parts, and are included in the parts tree (for
example, as pictured in Figure 4). However, the parts tree does not contain
information about which parts fuel lines connect to. The parent part of a fuel
line is the part from which it will take fuel (as shown in Figure 4) however the
part that it will send fuel to is not represented in the parts tree.

Figure 5 shows the fuel lines from the example vessel pictured earlier. Fuel
line part 15 (in red) takes fuel from a fuel tank (part 11 -- in green) and
feeds it into another fuel tank (part 9 -- in blue). The fuel line is therefore
a child of part 11, but its connection to part 9 is not represented in the tree.

The attributes #echo $ref('M:SpaceCenter.Part.FuelLinesFrom') # and
#echo $ref('M:SpaceCenter.Part.FuelLinesTo') # can be used to discover these

connections. In the example in Figure 5, when #echo $ref('M:SpaceCenter.Part.FuelLinesTo') #
is called on fuel tank part 11, it will return a list of parts containing just

fuel tank part 9 (the blue part). When #echo $ref('M:SpaceCenter.Part.FuelLinesFrom') #
is called on fuel tank part 9, it will return a list containing fuel tank parts
11 and 17 (the parts colored green).

.. _#echo $language #-api-parts-staging:

Staging
-------

.. figure:: /images/api/parts-staging.png
   :align: right
   :figwidth: 340

   **Figure 6** -- Example vessel from Figure 1 with a staging sequence.

Each part has two staging numbers associated with it: the stage in which the
part is *activated* and the stage in which the part is *decoupled*. These values
can be obtained using #echo $ref('M:SpaceCenter.Part.Stage') # and
#echo $ref('M:SpaceCenter.Part.DecoupleStage') # respectively. For parts that
are not activated by staging, #echo $ref('M:SpaceCenter.Part.Stage') # returns
-1. For parts that are never decoupled,
#echo $ref('M:SpaceCenter.Part.DecoupleStage') # returns a value of -1.

Figure 6 shows an example staging sequence for a vessel. Figure 7 shows the
stages in which each part of the vessel will be *activated*. Figure 8 shows the
stages in which each part of the vessel will be *decoupled*.

.. container:: clearer

   ..

.. figure:: /images/api/parts-staging-activate.png
   :align: left
   :figwidth: 250

   **Figure 7** -- The stage in which each part is *activated*.

.. figure:: /images/api/parts-staging-decouple.png
   :align: right
   :figwidth: 250

   **Figure 8** -- The stage in which each part is *decoupled*.

.. container:: clearer

   ..
