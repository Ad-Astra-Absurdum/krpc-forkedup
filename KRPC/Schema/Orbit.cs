// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace KRPC.Schema.Orbit {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Orbit {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Orbit_OrbitData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::KRPC.Schema.Orbit.OrbitData, global::KRPC.Schema.Orbit.OrbitData.Builder> internal__static_Orbit_OrbitData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Orbit() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgtPcmJpdC5wcm90bxIFT3JiaXQixAEKCU9yYml0RGF0YRIQCghhcG9hcHNp" + 
          "cxgBIAIoARIRCglwZXJpYXBzaXMYAiACKAESFAoMZWNjZW50cmljaXR5GAMg" + 
          "AigBEhMKC2luY2xpbmF0aW9uGAQgAigBEiAKGGxvbmdpdHVkZU9mQXNjZW5k" + 
          "aW5nTm9kZRgFIAIoARIbChNhcmd1bWVudE9mUGVyaWFwc2lzGAYgAigBEhoK" + 
          "Em1lYW5Bbm9tYWx5QXRFcG9jaBgHIAIoARIMCgRib2R5GAggAigJ");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Orbit_OrbitData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Orbit_OrbitData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::KRPC.Schema.Orbit.OrbitData, global::KRPC.Schema.Orbit.OrbitData.Builder>(internal__static_Orbit_OrbitData__Descriptor,
                new string[] { "Apoapsis", "Periapsis", "Eccentricity", "Inclination", "LongitudeOfAscendingNode", "ArgumentOfPeriapsis", "MeanAnomalyAtEpoch", "Body", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OrbitData : pb::GeneratedMessage<OrbitData, OrbitData.Builder> {
    private OrbitData() { }
    private static readonly OrbitData defaultInstance = new OrbitData().MakeReadOnly();
    private static readonly string[] _orbitDataFieldNames = new string[] { "apoapsis", "argumentOfPeriapsis", "body", "eccentricity", "inclination", "longitudeOfAscendingNode", "meanAnomalyAtEpoch", "periapsis" };
    private static readonly uint[] _orbitDataFieldTags = new uint[] { 9, 49, 66, 25, 33, 41, 57, 17 };
    public static OrbitData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OrbitData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OrbitData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.Orbit.Orbit.internal__static_Orbit_OrbitData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OrbitData, OrbitData.Builder> InternalFieldAccessors {
      get { return global::KRPC.Schema.Orbit.Orbit.internal__static_Orbit_OrbitData__FieldAccessorTable; }
    }
    
    public const int ApoapsisFieldNumber = 1;
    private bool hasApoapsis;
    private double apoapsis_;
    public bool HasApoapsis {
      get { return hasApoapsis; }
    }
    public double Apoapsis {
      get { return apoapsis_; }
    }
    
    public const int PeriapsisFieldNumber = 2;
    private bool hasPeriapsis;
    private double periapsis_;
    public bool HasPeriapsis {
      get { return hasPeriapsis; }
    }
    public double Periapsis {
      get { return periapsis_; }
    }
    
    public const int EccentricityFieldNumber = 3;
    private bool hasEccentricity;
    private double eccentricity_;
    public bool HasEccentricity {
      get { return hasEccentricity; }
    }
    public double Eccentricity {
      get { return eccentricity_; }
    }
    
    public const int InclinationFieldNumber = 4;
    private bool hasInclination;
    private double inclination_;
    public bool HasInclination {
      get { return hasInclination; }
    }
    public double Inclination {
      get { return inclination_; }
    }
    
    public const int LongitudeOfAscendingNodeFieldNumber = 5;
    private bool hasLongitudeOfAscendingNode;
    private double longitudeOfAscendingNode_;
    public bool HasLongitudeOfAscendingNode {
      get { return hasLongitudeOfAscendingNode; }
    }
    public double LongitudeOfAscendingNode {
      get { return longitudeOfAscendingNode_; }
    }
    
    public const int ArgumentOfPeriapsisFieldNumber = 6;
    private bool hasArgumentOfPeriapsis;
    private double argumentOfPeriapsis_;
    public bool HasArgumentOfPeriapsis {
      get { return hasArgumentOfPeriapsis; }
    }
    public double ArgumentOfPeriapsis {
      get { return argumentOfPeriapsis_; }
    }
    
    public const int MeanAnomalyAtEpochFieldNumber = 7;
    private bool hasMeanAnomalyAtEpoch;
    private double meanAnomalyAtEpoch_;
    public bool HasMeanAnomalyAtEpoch {
      get { return hasMeanAnomalyAtEpoch; }
    }
    public double MeanAnomalyAtEpoch {
      get { return meanAnomalyAtEpoch_; }
    }
    
    public const int BodyFieldNumber = 8;
    private bool hasBody;
    private string body_ = "";
    public bool HasBody {
      get { return hasBody; }
    }
    public string Body {
      get { return body_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasApoapsis) return false;
        if (!hasPeriapsis) return false;
        if (!hasEccentricity) return false;
        if (!hasInclination) return false;
        if (!hasLongitudeOfAscendingNode) return false;
        if (!hasArgumentOfPeriapsis) return false;
        if (!hasMeanAnomalyAtEpoch) return false;
        if (!hasBody) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _orbitDataFieldNames;
      if (hasApoapsis) {
        output.WriteDouble(1, field_names[0], Apoapsis);
      }
      if (hasPeriapsis) {
        output.WriteDouble(2, field_names[7], Periapsis);
      }
      if (hasEccentricity) {
        output.WriteDouble(3, field_names[3], Eccentricity);
      }
      if (hasInclination) {
        output.WriteDouble(4, field_names[4], Inclination);
      }
      if (hasLongitudeOfAscendingNode) {
        output.WriteDouble(5, field_names[5], LongitudeOfAscendingNode);
      }
      if (hasArgumentOfPeriapsis) {
        output.WriteDouble(6, field_names[1], ArgumentOfPeriapsis);
      }
      if (hasMeanAnomalyAtEpoch) {
        output.WriteDouble(7, field_names[6], MeanAnomalyAtEpoch);
      }
      if (hasBody) {
        output.WriteString(8, field_names[2], Body);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasApoapsis) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Apoapsis);
        }
        if (hasPeriapsis) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Periapsis);
        }
        if (hasEccentricity) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, Eccentricity);
        }
        if (hasInclination) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, Inclination);
        }
        if (hasLongitudeOfAscendingNode) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, LongitudeOfAscendingNode);
        }
        if (hasArgumentOfPeriapsis) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, ArgumentOfPeriapsis);
        }
        if (hasMeanAnomalyAtEpoch) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, MeanAnomalyAtEpoch);
        }
        if (hasBody) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Body);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OrbitData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrbitData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrbitData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrbitData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrbitData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrbitData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OrbitData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OrbitData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OrbitData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrbitData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OrbitData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OrbitData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<OrbitData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OrbitData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OrbitData result;
      
      private OrbitData PrepareBuilder() {
        if (resultIsReadOnly) {
          OrbitData original = result;
          result = new OrbitData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OrbitData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::KRPC.Schema.Orbit.OrbitData.Descriptor; }
      }
      
      public override OrbitData DefaultInstanceForType {
        get { return global::KRPC.Schema.Orbit.OrbitData.DefaultInstance; }
      }
      
      public override OrbitData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OrbitData) {
          return MergeFrom((OrbitData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OrbitData other) {
        if (other == global::KRPC.Schema.Orbit.OrbitData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasApoapsis) {
          Apoapsis = other.Apoapsis;
        }
        if (other.HasPeriapsis) {
          Periapsis = other.Periapsis;
        }
        if (other.HasEccentricity) {
          Eccentricity = other.Eccentricity;
        }
        if (other.HasInclination) {
          Inclination = other.Inclination;
        }
        if (other.HasLongitudeOfAscendingNode) {
          LongitudeOfAscendingNode = other.LongitudeOfAscendingNode;
        }
        if (other.HasArgumentOfPeriapsis) {
          ArgumentOfPeriapsis = other.ArgumentOfPeriapsis;
        }
        if (other.HasMeanAnomalyAtEpoch) {
          MeanAnomalyAtEpoch = other.MeanAnomalyAtEpoch;
        }
        if (other.HasBody) {
          Body = other.Body;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_orbitDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _orbitDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasApoapsis = input.ReadDouble(ref result.apoapsis_);
              break;
            }
            case 17: {
              result.hasPeriapsis = input.ReadDouble(ref result.periapsis_);
              break;
            }
            case 25: {
              result.hasEccentricity = input.ReadDouble(ref result.eccentricity_);
              break;
            }
            case 33: {
              result.hasInclination = input.ReadDouble(ref result.inclination_);
              break;
            }
            case 41: {
              result.hasLongitudeOfAscendingNode = input.ReadDouble(ref result.longitudeOfAscendingNode_);
              break;
            }
            case 49: {
              result.hasArgumentOfPeriapsis = input.ReadDouble(ref result.argumentOfPeriapsis_);
              break;
            }
            case 57: {
              result.hasMeanAnomalyAtEpoch = input.ReadDouble(ref result.meanAnomalyAtEpoch_);
              break;
            }
            case 66: {
              result.hasBody = input.ReadString(ref result.body_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasApoapsis {
        get { return result.hasApoapsis; }
      }
      public double Apoapsis {
        get { return result.Apoapsis; }
        set { SetApoapsis(value); }
      }
      public Builder SetApoapsis(double value) {
        PrepareBuilder();
        result.hasApoapsis = true;
        result.apoapsis_ = value;
        return this;
      }
      public Builder ClearApoapsis() {
        PrepareBuilder();
        result.hasApoapsis = false;
        result.apoapsis_ = 0D;
        return this;
      }
      
      public bool HasPeriapsis {
        get { return result.hasPeriapsis; }
      }
      public double Periapsis {
        get { return result.Periapsis; }
        set { SetPeriapsis(value); }
      }
      public Builder SetPeriapsis(double value) {
        PrepareBuilder();
        result.hasPeriapsis = true;
        result.periapsis_ = value;
        return this;
      }
      public Builder ClearPeriapsis() {
        PrepareBuilder();
        result.hasPeriapsis = false;
        result.periapsis_ = 0D;
        return this;
      }
      
      public bool HasEccentricity {
        get { return result.hasEccentricity; }
      }
      public double Eccentricity {
        get { return result.Eccentricity; }
        set { SetEccentricity(value); }
      }
      public Builder SetEccentricity(double value) {
        PrepareBuilder();
        result.hasEccentricity = true;
        result.eccentricity_ = value;
        return this;
      }
      public Builder ClearEccentricity() {
        PrepareBuilder();
        result.hasEccentricity = false;
        result.eccentricity_ = 0D;
        return this;
      }
      
      public bool HasInclination {
        get { return result.hasInclination; }
      }
      public double Inclination {
        get { return result.Inclination; }
        set { SetInclination(value); }
      }
      public Builder SetInclination(double value) {
        PrepareBuilder();
        result.hasInclination = true;
        result.inclination_ = value;
        return this;
      }
      public Builder ClearInclination() {
        PrepareBuilder();
        result.hasInclination = false;
        result.inclination_ = 0D;
        return this;
      }
      
      public bool HasLongitudeOfAscendingNode {
        get { return result.hasLongitudeOfAscendingNode; }
      }
      public double LongitudeOfAscendingNode {
        get { return result.LongitudeOfAscendingNode; }
        set { SetLongitudeOfAscendingNode(value); }
      }
      public Builder SetLongitudeOfAscendingNode(double value) {
        PrepareBuilder();
        result.hasLongitudeOfAscendingNode = true;
        result.longitudeOfAscendingNode_ = value;
        return this;
      }
      public Builder ClearLongitudeOfAscendingNode() {
        PrepareBuilder();
        result.hasLongitudeOfAscendingNode = false;
        result.longitudeOfAscendingNode_ = 0D;
        return this;
      }
      
      public bool HasArgumentOfPeriapsis {
        get { return result.hasArgumentOfPeriapsis; }
      }
      public double ArgumentOfPeriapsis {
        get { return result.ArgumentOfPeriapsis; }
        set { SetArgumentOfPeriapsis(value); }
      }
      public Builder SetArgumentOfPeriapsis(double value) {
        PrepareBuilder();
        result.hasArgumentOfPeriapsis = true;
        result.argumentOfPeriapsis_ = value;
        return this;
      }
      public Builder ClearArgumentOfPeriapsis() {
        PrepareBuilder();
        result.hasArgumentOfPeriapsis = false;
        result.argumentOfPeriapsis_ = 0D;
        return this;
      }
      
      public bool HasMeanAnomalyAtEpoch {
        get { return result.hasMeanAnomalyAtEpoch; }
      }
      public double MeanAnomalyAtEpoch {
        get { return result.MeanAnomalyAtEpoch; }
        set { SetMeanAnomalyAtEpoch(value); }
      }
      public Builder SetMeanAnomalyAtEpoch(double value) {
        PrepareBuilder();
        result.hasMeanAnomalyAtEpoch = true;
        result.meanAnomalyAtEpoch_ = value;
        return this;
      }
      public Builder ClearMeanAnomalyAtEpoch() {
        PrepareBuilder();
        result.hasMeanAnomalyAtEpoch = false;
        result.meanAnomalyAtEpoch_ = 0D;
        return this;
      }
      
      public bool HasBody {
        get { return result.hasBody; }
      }
      public string Body {
        get { return result.Body; }
        set { SetBody(value); }
      }
      public Builder SetBody(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBody = true;
        result.body_ = value;
        return this;
      }
      public Builder ClearBody() {
        PrepareBuilder();
        result.hasBody = false;
        result.body_ = "";
        return this;
      }
    }
    static OrbitData() {
      object.ReferenceEquals(global::KRPC.Schema.Orbit.Orbit.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
